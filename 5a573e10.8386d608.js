(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(9),o=(n(0),n(168)),i={id:"layoutEvolver",title:"Layout evolvers",sidebar_label:"Layout evolvers"},l={id:"layoutEvolver",title:"Layout evolvers",description:"The goal of layout evolvers is to, given an initial layout, evolve valid layouts. Layout evolvers are aware that the generation process is incremental and that only nodes in one chain are evolved at a time. Evolvers should terminate as soon as possible if they find themselves in a situation where it is unlikely to quickly produce valid layouts.\r",source:"@site/docs\\layoutEvolver.md",permalink:"/ProceduralLevelGenerator/docs/next/layoutEvolver",editUrl:"https://github.com/OndrejNepozitek/ProceduralLevelGenerator/tree/docusaurus/docs/layoutEvolver.md",version:"next",sidebar_label:"Layout evolvers"},s=[{value:"Simulated annealing evolver",id:"simulated-annealing-evolver",children:[{value:"Implementation",id:"implementation",children:[]},{value:"Random restarts",id:"random-restarts",children:[]},{value:"Parameters",id:"parameters",children:[]}]},{value:"Implementing a custom evolver",id:"implementing-a-custom-evolver",children:[{value:"Lazy evaluation",id:"lazy-evaluation",children:[]},{value:"Hooking into <code>ChainBasedGenerator</code>",id:"hooking-into-chainbasedgenerator",children:[]}]}],c={rightToc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The goal of layout evolvers is to, given an initial layout, evolve valid layouts. Layout evolvers are aware that the generation process is incremental and that only nodes in one chain are evolved at a time. Evolvers should terminate as soon as possible if they find themselves in a situation where it is unlikely to quickly produce valid layouts."),Object(o.b)("h2",{id:"simulated-annealing-evolver"},"Simulated annealing evolver"),Object(o.b)("p",null,"As its name suggests, this evolver is based on the ",Object(o.b)("em",{parentName:"p"},"simulated annealing")," algorithm. "),Object(o.b)("h3",{id:"implementation"},"Implementation"),Object(o.b)("p",null,"Current implementation looks similar to the following pseudocode:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"T = initial temperature\ns = initial layout\n\nfor (specified number of cycles) {\n  T = decreased temperature\n\n  for (specified number of trials) {\n    s_new = perturb a node (from the current chain) in s\n\n    if (s_new is valid) {\n        output s_new\n    }\n\n    if (s_new is good enough) {\n        s = s_new\n    }\n  }\n}\n")),Object(o.b)("h3",{id:"random-restarts"},"Random restarts"),Object(o.b)("p",null,"Evolvers are sometimes given layouts that cannot be evolved when perturbing only the nodes in the current chain. In such situations, an evolver should terminate as soon as possible. Therefore, s system of random restarts is implemented. The chance of terminating the algorithm increases as the algorithm fails to produce good enough partial layouts."),Object(o.b)("h3",{id:"parameters"},"Parameters"),Object(o.b)("p",null,"TODO"),Object(o.b)("h2",{id:"implementing-a-custom-evolver"},"Implementing a custom evolver"),Object(o.b)("p",null,"All evolvers must implement ",Object(o.b)("inlineCode",{parentName:"p"},"ILayoutEvolver<TLayout, TNode>")," interface. The source code with a detailed documentation can be found ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/OndrejNepozitek/MapGeneration/blob/master/MapGeneration.Interfaces/Core/ILayoutEvolver.cs"}),"on github"),". "),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Implementing your own evolver can be really easy as you can use existing ",Object(o.b)("inlineCode",{parentName:"em"},"LayoutOperations")," to handle all the layout operations and just focus on the evolution itself.")),Object(o.b)("h3",{id:"lazy-evaluation"},"Lazy evaluation"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Evolve")," method of ",Object(o.b)("inlineCode",{parentName:"p"},"ILayoutEvolver<TLayout, TNode>")," returns an ",Object(o.b)("inlineCode",{parentName:"p"},"IEnumerable<TLayout>"),". This makes it possible to easily implement layout evolvers with lazy evaluation (using ",Object(o.b)("inlineCode",{parentName:"p"},"yield return")," syntax). Lazy evaluation can have a ",Object(o.b)("em",{parentName:"p"},"huge")," impact on the overall convergence speed because ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/ProceduralLevelGenerator/docs/next/generatorPlanners"}),"generator planners")," are able to make optimizations without ever generating more partial layouts than they really need."),Object(o.b)("h3",{id:"hooking-into-chainbasedgenerator"},"Hooking into ",Object(o.b)("inlineCode",{parentName:"h3"},"ChainBasedGenerator")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ChainBasedGenerator")," provides a method with the following signature to inject your own ",Object(o.b)("inlineCode",{parentName:"p"},"ILayoutEvolver<TLayout, TNode>")," implementation. The creator is then called everytime the generation is started. "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-C#"}),"void SetLayoutEvolverCreator(Func<TMapDescription, IChainBasedLayoutOperations, ILayoutEvolver> creator);\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note"),": If your evolver does some heavy lifting on instantiation and does not depend on the actual ",Object(o.b)("inlineCode",{parentName:"p"},"MapDescription")," and/or ",Object(o.b)("inlineCode",{parentName:"p"},"LayoutOperations"),", you may create an instance beforehand and then return always the same one from the creator function."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Example usage"),": (generic parameters were omitted for simplicity)"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-C#"}),"var chainBasedGenerator = new ChainBasedGenerator();\n\nchainBasedGenerator.SetLayoutEvolverCreator((mapDescription, layoutOperations) => {\n    return new SimulatedAnnealingEvolver(layoutOperations);\n});\n")))}u.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?r.a.createElement(b,l({ref:t},c,{components:n})):r.a.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);